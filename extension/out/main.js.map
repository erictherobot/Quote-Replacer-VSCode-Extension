{
  "version": 3,
  "sources": ["../../extension.ts"],
  "sourcesContent": ["import * as vscode from \"vscode\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand(\n    \"extension.fixApostrophes\",\n    () => {\n      // Get the active editor\n      const editor = vscode.window.activeTextEditor;\n      if (!editor) {\n        return; // No active editor\n      }\n\n      // Get the current selection or the whole document\n      const document = editor.document;\n      const selection = editor.selection.isEmpty\n        ? new vscode.Range(\n            0,\n            0,\n            document.lineCount - 1,\n            document.lineAt(document.lineCount - 1).text.length\n          )\n        : editor.selection;\n\n      // Get the error message to fix\n      const errorMessage = document.getText(selection);\n\n      // Replace the special characters\n      const replacedMessage = errorMessage\n        .replace(/'/g, \"&apos;\")\n        .replace(/\u2018/g, \"&lsquo;\")\n        .replace(/&#39;/g, \"&rsquo;\");\n\n      // Apply the fix in the editor\n      editor.edit((editBuilder: string) => {\n        editBuilder.replace(selection, replacedMessage);\n      });\n    }\n  );\n\n  context.subscriptions.push(disposable);\n\n  vscode.languages.registerCodeActionsProvider(\n    { pattern: \"**/*.{ts,js}\" }, // Specify the file types to apply the quick fix to\n    {\n      provideCodeActions(\n        document: { getText: () => any; positionAt: (arg0: number) => any },\n        range: any,\n        context: any,\n        token: any\n      ) {\n        const diagnostics: vscode.Diagnostic[] = [];\n\n        // Find the special characters in the document\n        const text = document.getText();\n        const regex = /['\u2018\u2019]/g;\n        let match;\n        while ((match = regex.exec(text))) {\n          const diagnostic = new vscode.Diagnostic(\n            new vscode.Range(\n              document.positionAt(match.index),\n              document.positionAt(match.index + match[0].length)\n            ),\n            \"Replace special character\",\n            vscode.DiagnosticSeverity.Warning\n          );\n          diagnostic.code = \"replace-special-character\";\n          diagnostic.source = \"Quote Replacer\";\n\n          const fixAction = new vscode.CodeAction(\n            \"Fix apostrophes\",\n            vscode.CodeActionKind.QuickFix\n          );\n          fixAction.command = {\n            command: \"extension.fixApostrophes\",\n            title: \"Fix Apostrophes\",\n            arguments: [document, diagnostic.range],\n          };\n\n          fixAction.diagnostics = [diagnostic];\n          diagnostics.push(diagnostic);\n        }\n\n        return diagnostics;\n      },\n    }\n  );\n}\n\nexport function deactivate() {}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AAEjB,SAAS,SAAS,SAAkC;AACzD,MAAI,aAAoB,gBAAS;AAAA,IAC/B;AAAA,IACA,MAAM;AAEJ,YAAM,SAAgB,cAAO;AAC7B,UAAI,CAAC,QAAQ;AACX;AAAA,MACF;AAGA,YAAM,WAAW,OAAO;AACxB,YAAM,YAAY,OAAO,UAAU,UAC/B,IAAW;AAAA,QACT;AAAA,QACA;AAAA,QACA,SAAS,YAAY;AAAA,QACrB,SAAS,OAAO,SAAS,YAAY,CAAC,EAAE,KAAK;AAAA,MAC/C,IACA,OAAO;AAGX,YAAM,eAAe,SAAS,QAAQ,SAAS;AAG/C,YAAM,kBAAkB,aACrB,QAAQ,MAAM,QAAQ,EACtB,QAAQ,MAAM,SAAS,EACvB,QAAQ,UAAU,SAAS;AAG9B,aAAO,KAAK,CAAC,gBAAwB;AACnC,oBAAY,QAAQ,WAAW,eAAe;AAAA,MAChD,CAAC;AAAA,IACH;AAAA,EACF;AAEA,UAAQ,cAAc,KAAK,UAAU;AAErC,EAAO,iBAAU;AAAA,IACf,EAAE,SAAS,eAAe;AAAA;AAAA,IAC1B;AAAA,MACE,mBACE,UACA,OACAA,UACA,OACA;AACA,cAAM,cAAmC,CAAC;AAG1C,cAAM,OAAO,SAAS,QAAQ;AAC9B,cAAM,QAAQ;AACd,YAAI;AACJ,eAAQ,QAAQ,MAAM,KAAK,IAAI,GAAI;AACjC,gBAAM,aAAa,IAAW;AAAA,YAC5B,IAAW;AAAA,cACT,SAAS,WAAW,MAAM,KAAK;AAAA,cAC/B,SAAS,WAAW,MAAM,QAAQ,MAAM,CAAC,EAAE,MAAM;AAAA,YACnD;AAAA,YACA;AAAA,YACO,0BAAmB;AAAA,UAC5B;AACA,qBAAW,OAAO;AAClB,qBAAW,SAAS;AAEpB,gBAAM,YAAY,IAAW;AAAA,YAC3B;AAAA,YACO,sBAAe;AAAA,UACxB;AACA,oBAAU,UAAU;AAAA,YAClB,SAAS;AAAA,YACT,OAAO;AAAA,YACP,WAAW,CAAC,UAAU,WAAW,KAAK;AAAA,UACxC;AAEA,oBAAU,cAAc,CAAC,UAAU;AACnC,sBAAY,KAAK,UAAU;AAAA,QAC7B;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF;AAEO,SAAS,aAAa;AAAC;",
  "names": ["context"]
}
